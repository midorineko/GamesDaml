module Main where

import Daml.Script

import Game

setup : Script GameId
setup = script do
    steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
    amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")
    stevenId <- validateUserId "steven"
    createUser (User stevenId (Some steven)) [CanActAs steven]
    amaniId <- validateUserId "amani"
    createUser (User amaniId (Some amani)) [CanActAs amani]

    -- create a game
    stevensGame <- submit steven do
      createCmd Game with
        purchaser = steven
        owner  = steven
        name    = "Pokemon"
        level = 0
        totalTimePlayed = 0

    -- log some hours
    stevensPlayedGame <- submit steven do 
      exerciseCmd stevensGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5

    -- propose transfer (GameTransferProposalID would break if stopped here since script expect GameId)
    stevenToamani <- submit steven do 
      exerciseCmd stevensPlayedGame ProposeTransfer with newOwner = amani

    -- accept transfer (GameId accept returns a game id)
    amanisGame <- submit amani do
      exerciseCmd stevenToamani GameTransferProposal_Accept

    -- a second game is created
    thps <- submit amani do
      createCmd Game with
        purchaser = amani
        owner  = amani
        name    = "Tony Hawk Pro Skater"
        level = 0
        totalTimePlayed = 0

    --log thps game time
    amaniPlaysThps <- submit amani do
      exerciseCmd thps LogPlayTime with levelsCompleted = 8, hoursPlayed = 19

    --amani finishes playing that (set up so the Finished Playing Game has a contract)
    submit amani do
      exerciseCmd amaniPlaysThps FinishedPlayingGame

    -- log game time
    amanisPlaytime <- submit amani do
      exerciseCmd amanisGame LogPlayTime with levelsCompleted = 3, hoursPlayed = 5

    -- amani submits to games played
    amanisPlayedgames <- submit amani do 
      exerciseCmd amanisPlaytime FinishedPlayingGame

    -- amani pulls his gabe back
    amaniStartedAgain <- submit amani do
      exerciseCmd amanisPlayedgames GetGame

    -- amani logs hours in game
    submit amani do
      exerciseCmd amaniStartedAgain LogPlayTime with levelsCompleted = 5, hoursPlayed = 5

--GameSessionTimeId Testing
logSessionTime : Script GameSessionTimeId
logSessionTime = script do
  steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
  amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")
  fish <- allocatePartyWithHint "Fish" (PartyIdHint "Fish")

  stevensGame <- submit steven do
    createCmd Game with
      purchaser = steven
      owner  = steven
      name    = "Pokemon"
      level = 10
      totalTimePlayed = 100

  stevenLog <- submit steven do
    exerciseCmd stevensGame LogSessionTime with secondary = amani

  stevensPlaytime <- submit steven do
    exerciseCmd stevensGame LogPlayTime with levelsCompleted = 3, hoursPlayed = 5

  stevenLog <- submit steven do
    exerciseCmd stevensPlaytime LogSessionTime with secondary = amani

  amaniChecksStevensTime <- submit amani do
    exerciseCmd stevenLog CheckSessionTime

  assert (amaniChecksStevensTime == 105)

  (split1, split2) <- submit steven do
    exerciseCmd stevenLog SplitGameTime with hoursSplit = 55, secondGameName = "Tony Hawk Pro Skater"

  Some c <- queryContractId steven split1
  assert (c.hoursPlayed == 55)

  submit steven do
    exerciseCmd stevensPlaytime LogSessionTime with secondary = amani


nonConsumingChoiceCheck : Script Int
nonConsumingChoiceCheck = script do
  steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
  stevensGame <- submit steven do
    createCmd Game with
      purchaser = steven
      owner  = steven
      name    = "Pokemon"
      level = 10
      totalTimePlayed = 100

  Some c <- queryContractId steven stevensGame
  assert (c.totalTimePlayed == 100)

  stevenLog <- submit steven do
    exerciseCmd stevensGame LogSessionTime with secondary = steven

  submit steven do
    exerciseCmd stevenLog CheckSessionTime

simplePlayGames : Script GameId
simplePlayGames = script do
  steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")

  stevensGame <- submit steven do
    createCmd Game with
      purchaser = steven
      owner  = steven
      name    = "Pokemon"
      level = 0
      totalTimePlayed = 0

  stevensPlayedGame <- submit steven do 
    exerciseCmd stevensGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5

  stevensPlayedMoreGame <- submit steven do 
    exerciseCmd stevensPlayedGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5

  submit steven do 
    exerciseCmd stevensPlayedMoreGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5

--GameTransferProposalId Testing
transferOwnership : Script GameTransferProposalId
transferOwnership = script do
    steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
    amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")
    fish <- allocatePartyWithHint "Fish" (PartyIdHint "Fish")

    stevensGame <- submit steven do
      createCmd Game with
        purchaser = steven
        owner  = steven
        name    = "Pokemon"
        level = 0
        totalTimePlayed = 0

    stevensPlayedGame <- submit steven do 
      exerciseCmd stevensGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5
      
    stevenToamani <- submit steven do 
      exerciseCmd stevensPlayedGame ProposeTransfer with newOwner = amani

    amanisGame <- submit amani do
      exerciseCmd stevenToamani GameTransferProposal_Accept

    amaniPlays <- submit amani do
      exerciseCmd amanisGame LogPlayTime with levelsCompleted = 5, hoursPlayed = 10

    propsedTransfer <- submit amani do 
      exerciseCmd amaniPlays ProposeTransfer with newOwner = steven

    cancelledTransfer <- submit amani do
      exerciseCmd propsedTransfer GameTransferProposal_Cancel

    submit amani do
      exerciseCmd cancelledTransfer ProposeTransfer with newOwner = fish

--FinishedPlayingId Testing
loggingFinishedPlaying : Script FinishedPlayingId
loggingFinishedPlaying = script do
    steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
    amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")

    pokemon <- submit steven do
      createCmd Game with
        purchaser = steven
        owner  = steven
        name    = "Pokemon"
        level = 0
        totalTimePlayed = 0

    thps <- submit amani do
      createCmd Game with
        purchaser = amani
        owner  = amani
        name    = "Tony Hawk Pro Skater"
        level = 0
        totalTimePlayed = 0

    stevensPlayedGame <- submit steven do 
      exerciseCmd pokemon LogPlayTime with levelsCompleted = 2, hoursPlayed = 5

    amaniPlay <- submit amani do
      exerciseCmd thps LogPlayTime with levelsCompleted = 5, hoursPlayed = 10
    
    submit amani do
      exerciseCmd amaniPlay FinishedPlayingGame
      
    stevenFinishedPlaying <- submit steven do 
      exerciseCmd stevensPlayedGame FinishedPlayingGame

    stevensStartedPlaying <- submit steven do
      exerciseCmd stevenFinishedPlaying GetGame

    stevenToamani <- submit steven do 
      exerciseCmd stevensStartedPlaying ProposeTransfer with newOwner = amani

    amanisAccpetsGame <- submit amani do
      exerciseCmd stevenToamani GameTransferProposal_Accept

    amanisGame <- submit amani do
      exerciseCmd amanisAccpetsGame LogPlayTime with levelsCompleted = 5, hoursPlayed = 10

    submit amani do 
      exerciseCmd amanisGame FinishedPlayingGame

-- Must Fail Testing
sadPaths : Script (GameSessionTimeId, GameSessionTimeId)
sadPaths = script do
    steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
    amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")

    stevensGame <- submit steven do
      createCmd Game with
        purchaser = steven
        owner  = steven
        name    = "Pokemon"
        level = 0
        totalTimePlayed = 0

    submitMustFail steven do 
      exerciseCmd stevensGame LogPlayTime with hoursPlayed = -10, levelsCompleted= 5

    submitMustFail amani do
      exerciseCmd stevensGame FinishedPlayingGame

    submitMustFail steven do
      exerciseCmd stevensGame ProposeTransfer with newOwner = steven

    stevenPlays <- submit steven do 
      exerciseCmd stevensGame LogPlayTime with hoursPlayed = 10, levelsCompleted = 5

    stevenSessionTime <- submit steven do
      exerciseCmd stevenPlays LogSessionTime with secondary = steven

    submitMustFail steven do
      exerciseCmd stevenSessionTime SplitGameTime with hoursSplit = 100, secondGameName = "Pokemon"

    submit steven do
      exerciseCmd stevenSessionTime SplitGameTime with hoursSplit = 2, secondGameName = "Pokemon"


    

    