module Main where

import Daml.Script

import Game

setup : Script GameId
setup = script do
    steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
    amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")
    stevenId <- validateUserId "steven"
    createUser (User stevenId (Some steven)) [CanActAs steven]
    amaniId <- validateUserId "amani"
    createUser (User amaniId (Some amani)) [CanActAs amani]

    -- create a game
    stevensGame <- submit steven do
      createCmd Game with
        purchaser = steven
        owner  = steven
        name    = "Pokemon"
        level = 0
        totalTimePlayed = 0


    -- log some hours
    (stevensPlayedSession, stevensPlayedGame) <- submit steven do 
      exerciseCmd stevensGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5, secondary = steven

    -- propose transfer (GameTransferProposalID would break if stopped here since script expect GameId)
    stevenToamani <- submit steven do 
      exerciseCmd stevensPlayedGame ProposeTransfer with newOwner = amani

    -- accept transfer (GameId accept returns a game id)
    amanisPokemonGame <- submit amani do
      exerciseCmd stevenToamani GameTransferProposal_Accept

    -- a second game is created
    amanisthps <- submit amani do
      createCmd Game with
        purchaser = amani
        owner  = amani
        name    = "Tony Hawk Pro Skater"
        level = 0
        totalTimePlayed = 0

    --log thps game time
    (amaniPlaysSession, amaniPlaysThps) <- submit amani do
      exerciseCmd amanisthps LogPlayTime with levelsCompleted = 8, hoursPlayed = 19, secondary = steven

    submit amani do
      exerciseCmd amaniPlaysSession SplitGameTime with hoursSplit=7

    --amani finishes playing that (set up so the Finished Playing Game has a contract)
    submit amani do
      exerciseCmd amaniPlaysThps FinishedPlayingGame

    -- log game time
    (amanisPokemonSession, amanisPokemonGame) <- submit amani do
      exerciseCmd amanisPokemonGame LogPlayTime with levelsCompleted = 3, hoursPlayed = 5, secondary = steven

    -- amani submits to games played
    amanisFinishedPokemon <- submit amani do 
      exerciseCmd amanisPokemonGame FinishedPlayingGame

    -- amani pulls his game back
    submit amani do
      exerciseCmd amanisFinishedPokemon GetGame
    

--GameSessionTimeId Testing
logSessionTime : Script GameSessionTimeId
logSessionTime = script do
  steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
  amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")
  fish <- allocatePartyWithHint "Fish" (PartyIdHint "Fish")

  stevensGame <- submit steven do
    createCmd Game with
      purchaser = steven
      owner  = steven
      name    = "Pokemon"
      level = 10
      totalTimePlayed = 100

  (stevensSession, stevensPlaytime) <- submit steven do
    exerciseCmd stevensGame LogPlayTime with levelsCompleted = 3, hoursPlayed = 5, secondary = amani

  submitMustFail fish do
    exerciseCmd stevensSession CheckSessionTime

  amaniChecksStevensTime <- submit amani do
    exerciseCmd stevensSession CheckSessionTime

  assert (amaniChecksStevensTime == 5)

  submitMustFail amani do
    exerciseCmd stevensSession SplitGameTime with hoursSplit = 3

  (split1, split2) <- submit steven do
    exerciseCmd stevensSession SplitGameTime with hoursSplit = 3

  Some c <- queryContractId steven split1
  assert (c.hoursPlayed == 3)

  submit steven do
    exerciseCmd split2 AddSessionTime with newHours = 10


nonConsumingChoiceCheck : Script Int
nonConsumingChoiceCheck = script do
  steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
  stevensGame <- submit steven do
    createCmd Game with
      purchaser = steven
      owner  = steven
      name    = "Pokemon"
      level = 10
      totalTimePlayed = 100

  Some c <- queryContractId steven stevensGame
  assert (c.totalTimePlayed == 100)

  (stevenSession, stevenGame) <- submit steven do
    exerciseCmd stevensGame LogPlayTime with levelsCompleted = 10, hoursPlayed=15, secondary = steven

  submit steven do
    exerciseCmd stevenSession CheckSessionTime

simplePlayGames : Script (GameSessionTimeId, GameId)
simplePlayGames = script do
  steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")

  stevensGame <- submit steven do
    createCmd Game with
      purchaser = steven
      owner  = steven
      name    = "Pokemon"
      level = 0
      totalTimePlayed = 0

  (stevensPlayedSession, stevensPlayedGame) <- submit steven do 
    exerciseCmd stevensGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5, secondary=steven

  (stevensPlayedMoreSession, stevensPlayedMoreGame) <- submit steven do 
    exerciseCmd stevensPlayedGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5, secondary = steven

  submit steven do 
    exerciseCmd stevensPlayedMoreGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5, secondary = steven

--GameTransferProposalId Testing
transferOwnership : Script GameTransferProposalId
transferOwnership = script do
    steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
    amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")
    fish <- allocatePartyWithHint "Fish" (PartyIdHint "Fish")

    stevensGame <- submit steven do
      createCmd Game with
        purchaser = steven
        owner  = steven
        name    = "Pokemon"
        level = 0
        totalTimePlayed = 0

    (stevensPlayedSession, stevensPlayedGame) <- submit steven do 
      exerciseCmd stevensGame LogPlayTime with levelsCompleted = 2, hoursPlayed = 5, secondary = amani
      
    stevenToamani <- submit steven do 
      exerciseCmd stevensPlayedGame ProposeTransfer with newOwner = amani

    amanisGame <- submit amani do
      exerciseCmd stevenToamani GameTransferProposal_Accept

    (amaniPlaySession, amaniPlays) <- submit amani do
      exerciseCmd amanisGame LogPlayTime with levelsCompleted = 5, hoursPlayed = 10, secondary = steven

    Some c <- queryContractId steven stevensPlayedSession
    assert (c.hoursPlayed == 5)

    propsedTransfer <- submit amani do 
      exerciseCmd amaniPlays ProposeTransfer with newOwner = steven

    cancelledTransfer <- submit amani do
      exerciseCmd propsedTransfer GameTransferProposal_Cancel

    submit amani do
      exerciseCmd cancelledTransfer ProposeTransfer with newOwner = fish

--FinishedPlayingId Testing
loggingFinishedPlaying : Script FinishedPlayingId
loggingFinishedPlaying = script do
    steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
    amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")

    pokemon <- submit steven do
      createCmd Game with
        purchaser = steven
        owner  = steven
        name    = "Pokemon"
        level = 0
        totalTimePlayed = 0

    thps <- submit amani do
      createCmd Game with
        purchaser = amani
        owner  = amani
        name    = "Tony Hawk Pro Skater"
        level = 0
        totalTimePlayed = 0

    (stevensPlayedSession, stevensPlayedGame) <- submit steven do 
      exerciseCmd pokemon LogPlayTime with levelsCompleted = 2, hoursPlayed = 5, secondary = steven

    (amaniPlaySession, amaniPlayGame) <- submit amani do
      exerciseCmd thps LogPlayTime with levelsCompleted = 5, hoursPlayed = 10, secondary = steven
    
    submit amani do
      exerciseCmd amaniPlayGame FinishedPlayingGame
      
    stevenFinishedPlaying <- submit steven do 
      exerciseCmd stevensPlayedGame FinishedPlayingGame

    stevensStartedPlaying <- submit steven do
      exerciseCmd stevenFinishedPlaying GetGame

    stevenToamani <- submit steven do 
      exerciseCmd stevensStartedPlaying ProposeTransfer with newOwner = amani

    amanisAccpetsGame <- submit amani do
      exerciseCmd stevenToamani GameTransferProposal_Accept

    (amanisSession, amanisGame) <- submit amani do
      exerciseCmd amanisAccpetsGame LogPlayTime with levelsCompleted = 5, hoursPlayed = 10, secondary = steven

    submit amani do 
      exerciseCmd amanisGame FinishedPlayingGame

-- Must Fail Testing
sadPaths : Script ()
sadPaths = script do
    steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
    amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")

    stevensGame <- submit steven do
      createCmd Game with
        purchaser = steven
        owner  = steven
        name    = "Pokemon"
        level = 0
        totalTimePlayed = 0

    submitMustFail steven do 
      exerciseCmd stevensGame LogPlayTime with hoursPlayed = -10, levelsCompleted= 5, secondary = steven

    submitMustFail amani do
      exerciseCmd stevensGame FinishedPlayingGame

    submitMustFail steven do
      exerciseCmd stevensGame ProposeTransfer with newOwner = steven

    (stevenPlaySession, stevenPlayGame) <- submit steven do 
      exerciseCmd stevensGame LogPlayTime with hoursPlayed = 10, levelsCompleted = 5, secondary = amani

    submitMustFail steven do
      exerciseCmd stevenPlaySession SplitGameTime with hoursSplit = 100

    submit steven do
      exerciseCmd stevenPlaySession SplitGameTime with hoursSplit = 2

    pure()

newOwner : Script ()
newOwner = script do
    steven <- allocatePartyWithHint "Steven" (PartyIdHint "Steven")
    amani <- allocatePartyWithHint "Amani" (PartyIdHint "Amani")

    submitMustFail steven do
      createCmd FinishedPlaying with
        game = Game with
          purchaser = steven
          owner  = steven
          name    = "Pokemon"
          level = 0
          totalTimePlayed = 0
        owner = amani

    submit steven do
      createCmd FinishedPlaying with
        game = Game with
          purchaser = steven
          owner  = steven
          name    = "Pokemon"
          level = 0
          totalTimePlayed = 0
        owner = steven

    pure()



    

    